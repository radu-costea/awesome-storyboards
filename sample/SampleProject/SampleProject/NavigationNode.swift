//
//  Autogenerated code. Do not change.
//

import UIKit
import Foundation

protocol NavigationNode {
    associatedtype Routes
    func shouldPerform(_ connection: Routes) -> Bool
}

extension NavigationNode where Self: UIViewController, Routes: RawRepresentable, Routes.RawValue == String {

    /// Navigates to a route
    ///
    /// - Parameter route: The connection to navigate to
    func goTo(_ route: Routes)  {
        performSegue(withIdentifier: route.rawValue, sender: nil)
    }

    /// Default implementation for checking if a route should be invoked
    ///
    /// - Parameter route: The route to follow
    /// - Returns: true if the route is allowed
    func shouldPerform(_ route: Routes) -> Bool {
        return true
    }
}

// MARK: - ViewController Lifecycle generated code

extension ViewController {
    static func instantiateFromStoryboard() -> ViewController {
        return UIStoryboard(name: "Main", bundle: nil).instantiateInitialViewController() as! ViewController
    }
}

// MARK: - ViewController navigation generated code

protocol ViewControllerNavigation: NavigationNode {
    func prepare(forRoute route: Routes, destination: UINavigationController)
}

extension ViewController: ViewControllerNavigation {
    enum Routes: String {
        case showNav
    }

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        guard let identifier = segue.identifier, let route = Routes(rawValue: identifier) else { return }
        switch route {
        case .showNav:
            if let destination = segue.destination as? UINavigationController {
                prepare(forRoute: .showNav, destination: destination)
            }
        }
    }

    override func shouldPerformSegue(withIdentifier identifier: String, sender: Any?) -> Bool {
        guard let route = Routes(rawValue: identifier) else { return false }
        return shouldPerform(route)
    }
}
