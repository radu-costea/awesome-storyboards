
//
//  Autogenerated code. Please do not change.
//
//  Copyright Â© 2018 SoftVision. All rights reserved.
//
//

import UIKit
import Foundation

protocol NavigationNode {
    associatedtype Routes
    func shouldPerform(_ connection: Routes) -> Bool
}

extension NavigationNode where Self: UIViewController, Routes: RawRepresentable, Routes.RawValue == String {

    /// Navigates to a route
    ///
    /// - Parameter route: The connection to navigate to
    func go(to route: Routes)  {
        performSegue(withIdentifier: route.rawValue, sender: nil)
    }

    /// Default implementation for checking if a route should be invoked
    ///
    /// - Parameter route: The route to follow
    /// - Returns: true if the route is allowed
    func shouldPerform(_ route: Routes) -> Bool {
        return true
    }
}

// MARK: - UINavigationController Lifecycle generated code

extension UINavigationController {
    static func instantiateFromStoryboard() -> UINavigationController {
        return UIStoryboard(name: "Main", bundle: nil).instantiateInitialViewController() as! UINavigationController
    }
}

// MARK: - MenuViewController navigation generated code

protocol MenuViewControllerNavigation: NavigationNode {
    func prepare(forRoute route: Routes, destination: GalleryViewController)
    func prepare(forRoute route: Routes, destination: PhotoDetailsViewController)
}

extension MenuViewController: MenuViewControllerNavigation {
    enum Routes: String {
        case showPhotos
        case showRandom
    }

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        guard let identifier = segue.identifier, let route = Routes(rawValue: identifier) else {
            return
        }
        switch route {
        case .showPhotos:
            if let destination = segue.destination as? GalleryViewController {
                prepare(forRoute: route, destination: destination)
            }
        case .showRandom:
            if let destination = segue.destination as? PhotoDetailsViewController {
                prepare(forRoute: route, destination: destination)
            }
        }
    }

    override func shouldPerformSegue(withIdentifier identifier: String, sender: Any?) -> Bool {
        guard let route = Routes(rawValue: identifier) else {
            return false
        }
        return shouldPerform(route)
    }
}

// MARK: - GalleryViewController navigation generated code

protocol GalleryViewControllerNavigation: NavigationNode {
    func prepare(forRoute route: Routes, destination: PhotoDetailsViewController)
    func prepare(forRoute route: Routes, destination: PhotosCollectionViewController)
}

extension GalleryViewController: GalleryViewControllerNavigation {
    enum Routes: String {
        case showDetails
        case gallery
    }

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        guard let identifier = segue.identifier, let route = Routes(rawValue: identifier) else {
            return
        }
        switch route {
        case .showDetails:
            if let destination = segue.destination as? PhotoDetailsViewController {
                prepare(forRoute: route, destination: destination)
            }
        case .gallery:
            if let destination = segue.destination as? PhotosCollectionViewController {
                prepare(forRoute: route, destination: destination)
            }
        }
    }

    override func shouldPerformSegue(withIdentifier identifier: String, sender: Any?) -> Bool {
        guard let route = Routes(rawValue: identifier) else {
            return false
        }
        return shouldPerform(route)
    }
}

